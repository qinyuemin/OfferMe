<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- ========================== 自定义输出格式说明================================ -->
	<!-- %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL -->
	<!-- #%r 输出自应用启动到输出该log信息耗费的毫秒数  -->
	<!-- #%c 输出所属的类目，通常就是所在类的全名 -->
	<!-- #%t 输出产生该日志事件的线程名 -->
	<!-- #%m:产生的日志具体信息 -->
	<!-- #%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” -->
	<!-- #%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  -->
	<!-- %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10) -->
    <!-- %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中 -->
    <!-- %%: 输出一个"%"字符 -->
    <!-- %F: 输出日志消息产生时所在的文件名称 -->
    <!-- %L: 输出代码中的行号 -->
	<!-- ========================================================================== -->
	
	<appender name="SendMessage"
		class="org.apache.log4j.RollingFileAppender">
		<param name="File" value="Log/Message.log" />
		<param name="Append" value="true" />
		<param name="MaxFileSize" value="1024KB" />
		<param name="Encoding" value="UTF-8" />
		<param name="MaxBackupIndex" value="100" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}] [%t(%F:%L)]%n%p: %m%n" />
		</layout>
	</appender>

	<!-- 输出到控制台中 -->
	<appender name="cosoleLogger" class="org.apache.log4j.ConsoleAppender">
		<param name="Threshold" value="ERROR" />
		<layout class="org.apache.log4j.PatternLayout">
				<param name="ConversionPattern"
				value="[%d{yyyy-MM-dd HH:mm:ss}] [%t(%F:%L)]%n%p: %m%n" />
		</layout>
	</appender>

    <logger name="Send" additivity="true">     
        <level value ="INFO"/>       
        <appender-ref ref="SendMessage" />       
    </logger>

	<!-- 设置接收所有输出的通道 -->
	<root>
		<level value="ERROR" />
		<appender-ref ref="cosoleLogger" />
	</root>

</log4j:configuration>
