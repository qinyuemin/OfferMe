package com.offerme.client.activity;

import java.io.IOException;
import java.util.List;
import java.util.Locale;

import com.offerme.R;
import com.offerme.client.service.LoginSrvc;
import com.offerme.client.service.UtilSrvc;

import android.content.Context;
import android.content.Intent;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.support.v7.app.ActionBarActivity;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;

public class LoadingActivity extends ActionBarActivity {

	private Handler handler = new Handler();
	private LoginSrvc loginSrvc = LoginSrvc.getInstance();
	private UtilSrvc utilSrvc = UtilSrvc.getInstance();
	private Context context = this;
	private boolean hasLoggedIn = false;
	private ImageView image;
	private LocationManager locationManager = null;
	private String cityLocation = "";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		utilSrvc.addNewActivity(this);
		setContentView(R.layout.activity_loading);
		getSupportActionBar().hide();
		image = (ImageView) findViewById(R.id.loading_logo);
		doAnimation(this, image, R.anim.laoding);
		if (loginSrvc.isLoggedInOnce(this)) {
			hasLoggedIn = true;
		}
		handler.postDelayed(new Runnable() {
			@Override
			public void run() {
				Intent intent = new Intent();
				if (hasLoggedIn) {
					intent = new Intent(context, LoggedInActivity.class);
				} else {
					intent = new Intent(context, HomePageActivity.class);
				}
				getCityByNetWork();
				startActivity(intent);
				finish();
				overridePendingTransition(R.anim.enter, R.anim.exit);
			}
		}, 2000);

	}
	
	private boolean getCityByNetWork() {
		locationManager = (LocationManager) this
				.getSystemService(Context.LOCATION_SERVICE);
		Criteria criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_FINE);
		criteria.setAltitudeRequired(false);
		criteria.setBearingRequired(false);
		criteria.setCostAllowed(true);
		criteria.setPowerRequirement(Criteria.POWER_LOW);
		String provider = locationManager.getBestProvider(criteria, true);
		if (provider != null) {
			Location location = locationManager.getLastKnownLocation(provider);
			while(location==null)
			{
				location = locationManager.getLastKnownLocation(provider);
			}
			//if (location != null) {
				double latitude = location.getLatitude();
				double longtitude = location.getLongitude();
				Geocoder gc = new Geocoder(context, Locale.getDefault());
				List<Address> addresses;
				try {
					addresses = gc.getFromLocation(latitude, longtitude, 1);
					StringBuilder sb = new StringBuilder();
					if (addresses.size() > 0) {
						Address address = addresses.get(0);
						sb.append(address.getLocality()).append("\n");
						cityLocation = sb.toString();
					}
					return true;
				} catch (IOException e) {
					e.printStackTrace();
					return false;
				}
			//}
		}
		return false;
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		finish();
	}

	public void doAnimation(Context context, View view, int animId) {
		Animation animation = AnimationUtils.loadAnimation(context, animId);
		view.startAnimation(animation);
	}
}
