package com.offerme.server.service;

import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;

import com.offerme.server.database.dao.ApplyInfoDao;
import com.offerme.server.database.dao.CVDao;
import com.offerme.server.database.dao.MessageDao;
import com.offerme.server.database.dao.UserDao;
import com.offerme.server.database.dao.proxy.DaoImplManage;
import com.offerme.server.database.model.CV;
import com.offerme.server.database.model.Message;
import com.offerme.server.database.model.User;
import com.offerme.server.service.bean.CVList;
import com.offerme.server.service.bean.ChatMessage;
import com.offerme.server.service.bean.ChatMessageList;
import com.offerme.server.service.bean.PollingMessageList;
import com.offerme.server.util.Log;

public class PollingSrvc {

	private static final Log LOG = new Log(
			"com.offerme.server.service.PollingSrvc");

	private MessageDao msgDao = DaoImplManage.getMessageDaoInstance();
	private UserDao userDao = DaoImplManage.getUserDaoInstance();
	private ApplyInfoDao applyDao = DaoImplManage.getApplyInfoDaoInstance();
	private CVDao cvDao = DaoImplManage.getCVDaoInstance();
	private ChatMessageList chatList = new ChatMessageList();
	private CVList cvList = new CVList();
	private PollingMessageList pollingList = new PollingMessageList();

	public PollingMessageList getComingMessages(Integer userId) {

		getChatList(userId);
		getCVList(userId);
		pollingList.setChatMessageList(chatList);
		pollingList.setCvList(cvList);
		return pollingList;
	}

	private void getChatList(Integer userId) {
		try {
			List<Message> messages = msgDao.getMessagesByReceiverIncrem(userId);
			chatList = convertMessagesToChatMessageList(messages);
			chatList.setResponseCode(0);
		} catch (Exception e) {
			chatList.setResponseCode(-1);
			LOG.error("Cannot get coming messages, userId: " + userId);
		}
	}

	private void getCVList(Integer userId) {
		try {
			List<CV> cvs = applyDao.getCommingCV(userId);
			cvList = convertToPersonalCV(cvs);
			cvList.setResponseCode(0);
		} catch (InvocationTargetException e) {
			cvList.setResponseCode(-1);
			e.printStackTrace();
		}

	}

	private CVList convertToPersonalCV(List<CV> cvs) {
		CVList cvlist = new CVList();
		if(CollectionUtils.isNotEmpty(cvs))
		{
			for(CV cv:cvs)
			{
				
			}
		}
		return cvlist;
	}

	private ChatMessageList convertMessagesToChatMessageList(
			List<Message> messages) throws InvocationTargetException {

		ChatMessageList res = new ChatMessageList();

		if (CollectionUtils.isNotEmpty(messages)) {
			for (Message message : messages) {
				ChatMessage chatMsg = new ChatMessage();
				chatMsg.setMessageId(message.getMessageId());
				chatMsg.setUserId(message.getsUserId());
				chatMsg.setName(message.getSUser().getName());
				chatMsg.setComMsg(true);
				chatMsg.setText(message.getContent());
				if (isProfileChanged(message, message.getsUserId())) {
					chatMsg.setProfile(getUser(message.getsUserId())
							.getPortrait());
				}
				chatMsg.setProfileVersion(getUser(message.getsUserId())
						.getPortraitUpdateDt());
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm");
				chatMsg.setDate(df.format(message.getDate()));
				res.getChatMessageList().add(chatMsg);
			}
		}

		return res;
	}

	private boolean isProfileChanged(Message message, int userID)
			throws InvocationTargetException {
		System.out.println("Show me the message profile version and update: "
				+ message.getProfileVersion() + " "
				+ getUser(userID).getPortraitUpdateDt());
		if (message.getProfileVersion() < getUser(userID).getPortraitUpdateDt()
				&& message.getProfileVersion() != ChatMessage.DEFAULT_PROFILE_VERSION) {
			return true;
		}
		return false;
	}

	private User getUser(int userID) throws InvocationTargetException {
		return userDao.getUser(userID);
	}

}
