package com.offerme.client.activity;

import java.io.IOException;
import java.util.List;
import java.util.Locale;

import com.offerme.R;
import com.offerme.client.localdata.LocalDataBase;
import com.offerme.client.localdata.LocalPersonInfo;
import com.offerme.client.service.SearchSrvc;
import com.offerme.client.service.UtilSrvc;
import com.offerme.client.service.search.SearchKeyword;
import com.offerme.client.service.search.SearchResulat;
import com.offerme.client.service.search.SearchResulatItem;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputMethodManager;
import android.widget.AbsListView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.TextView.OnEditorActionListener;

public class SearchOfferActivity extends Fragment {

	private UtilSrvc utilSrvc = UtilSrvc.getInstance();
	private SearchSrvc searchSrvc = SearchSrvc.getInstance(utilSrvc);
	private LocalPersonInfo personInfo = LocalPersonInfo
			.getInstance(getActivity());
	private LocalDataBase database = LocalDataBase.getInstance(getActivity());
	private SearchResulat resultData = new SearchResulat();
	private BaseAdapter resualtAdapter = new searchResualtList();
	private SearchKeyword keyword = null;
	private EditText textEntreprise = null;
	private Spinner textCity = null;
	private Context context = null;
	private ListView resultList = null;
	private View searchView = null;
	private TextView searchAction = null;
	private Dialog processDialog = null;
	private LocationManager locationManager = null;
	private String cityLocation = "";
	private int offerPerPage = 5;
	private int lastItem = 0;
	private int start = 0;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		return inflater.inflate(R.layout.activity_search, container, false);
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		context = this.getActivity();
		try {
			initView();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void onResume() {
		super.onResume();
	}

	private void initView() {
		initActionBar();
		resultList = (ListView) getActivity().findViewById(
				R.id.search_resualt_list);
		LayoutInflater layoutInflater = (LayoutInflater) context
				.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		searchView = layoutInflater.inflate(
				R.layout.activity_search_list_progress, null);
		resultList.addFooterView(searchView);
		if (utilSrvc.HasSearchResualt()) {
			resultData = utilSrvc.getSearchResualt();
		}
		resultList.setAdapter(resualtAdapter);
		resultList.setOnScrollListener(new scrollListener());
		resultList.removeFooterView(searchView);
	}

	public void initActionBar() {
		keyword = utilSrvc.getKeyword();
		searchAction = (TextView) getActivity()
				.findViewById(R.id.search_action);
		searchAction.setOnClickListener(new searchJob());
		textEntreprise = (EditText) getActivity().findViewById(
				R.id.search_content);
		textCity = (Spinner) getActivity().findViewById(R.id.search_region);
		ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(
				this.getActivity(), R.array.city_list, R.layout.spinner_type);
		adapter.setDropDownViewResource(R.layout.spinner_dropdown_type);
		textCity.setAdapter(adapter);
		if (keyword != null) {
			textCity.setSelection(findCityPosition(keyword.getCity()));
		} else {
			getCurrentCity();
			textCity.setSelection(findCityPosition(cityLocation));
		}
		setKeyword();
		textEntreprise.setOnEditorActionListener(new search());
		if (utilSrvc.isHasOfferChanged()) {
			resualtAdapter.notifyDataSetChanged();
			utilSrvc.setSearchResualt(resultData);
			utilSrvc.setHasOfferChanged(false);
		}
	}

	private int findCityPosition(String cityName) {
		for (int count = 0; count < textCity.getCount(); count++) {
			if (cityName.contains(textCity.getItemAtPosition(count).toString())) {
				return count;
			}
		}
		return 0;
	}

	@SuppressWarnings("deprecation")
	private boolean getCityByNetWork() {
		locationManager = (LocationManager) this.getActivity()
				.getSystemService(Context.LOCATION_SERVICE);
		if (!locationManager
				.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER)) {
			android.provider.Settings.Secure.setLocationProviderEnabled(
					context.getContentResolver(), LocationManager.GPS_PROVIDER,
					false);
		}
		Criteria criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_FINE);
		criteria.setAltitudeRequired(false);
		criteria.setBearingRequired(false);
		criteria.setCostAllowed(false);
		criteria.setPowerRequirement(Criteria.POWER_LOW);
		String provider = locationManager.getBestProvider(criteria, true);
		if (provider != null) {
			Location location = locationManager.getLastKnownLocation(provider);
			while(location==null)
			{
				location = locationManager.getLastKnownLocation(provider);
			}
			
			locationManager.requestLocationUpdates(provider, 1000, 10,
					new locationListener(location));
			//if (location != null) {
				double latitude = location.getLatitude();
				double longtitude = location.getLongitude();
				Geocoder gc = new Geocoder(context, Locale.getDefault());
				List<Address> addresses;
				try {
					addresses = gc.getFromLocation(latitude, longtitude, 1);
					StringBuilder sb = new StringBuilder();
					if (addresses.size() > 0) {
						Address address = addresses.get(0);
						sb.append(address.getLocality()).append("\n");
						cityLocation = sb.toString();
					}
					return true;
				} catch (IOException e) {
					e.printStackTrace();
					return false;
				}
			//}
		}
		return false;
	}

	private class locationListener implements LocationListener
	{
		private Location loca;
		
		public locationListener(Location lo)
		{
			loca=lo;
		}
		
		@Override
		public void onLocationChanged(Location location) {
			loca = location;
		}

		@Override
		public void onProviderDisabled(String provider) {

		}

		@Override
		public void onProviderEnabled(String provider) {

		}

		@Override
		public void onStatusChanged(String provider, int status,
				Bundle extras) {

		}
		
	}
	
	private void getCurrentCity() {
		if (utilSrvc.isNetworkConnected(context)) {
			getCityByNetWork();
		}
		if (cityLocation.length() == 0) {
			// cityLocation = personInfo.getValue(LocalPersonInfo.CITY);
		}
	}

	public void startSearch() {
		if (utilSrvc.isNetworkConnected(context)) {
			setKeyword();
			setProcessDialog();
			searchSrvc.startSearch(context, processDialog, keyword,
					resultList.getAdapter(), resultData, start, offerPerPage);
		} else {
			utilSrvc.showConnectDialog(context);
		}
	}

	private boolean hasCityChanged() {
		if (!keyword.getCity().equalsIgnoreCase(
				String.valueOf(textCity.getSelectedItem()))) {
			return true;
		}
		return false;
	}

	private boolean hasEntrepriseChanged() {
		if (!keyword.getEntreprise().equalsIgnoreCase(
				String.valueOf(textEntreprise.getText()))) {
			return true;
		}
		return false;
	}

	private boolean hasKeywordChanged() {
		if (hasCityChanged() || hasEntrepriseChanged()) {
			return true;
		}
		return false;
	}

	private void setKeyword() {
		if (keyword != null && hasKeywordChanged()) {
			resultData.clearResulat();
		}
		keyword = new SearchKeyword(Integer.valueOf(personInfo
				.getValue(LocalPersonInfo.USERID)));
		keyword.setEntreprise(String.valueOf(textEntreprise.getText()));
		keyword.setCity(String.valueOf(textCity.getSelectedItem()));
		keyword.setPosition(textCity.getSelectedItemPosition());
		if (resultData.getSize() != 0) {
			keyword.setLastOfferID(resultData.getItem(resultData.getSize() - 1)
					.getOfferID());
		}
		utilSrvc.setKeyword(keyword);
	}

	private void setProcessDialog() {
		InputMethodManager inputmanager = (InputMethodManager) context
				.getSystemService(Context.INPUT_METHOD_SERVICE);
		inputmanager.hideSoftInputFromWindow(textEntreprise.getWindowToken(),
				InputMethodManager.HIDE_NOT_ALWAYS);
		LayoutInflater factory = LayoutInflater.from(context);
		View dialogView = factory.inflate(R.layout.dialog_process, null);
		AlertDialog.Builder builder = new AlertDialog.Builder(context);
		processDialog = builder.create();
		((AlertDialog) processDialog).setView(dialogView, 0, 0, 0, 0);
	}

	private class searchJob implements OnClickListener {
		@Override
		public void onClick(View view) {
			startSearch();
		}
	}

	private class search implements OnEditorActionListener {

		@Override
		public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
			startSearch();
			if (actionId == EditorInfo.IME_ACTION_SEARCH) {
				return true;
			}
			return false;
		}
	}

	private class onClickListener implements OnClickListener {

		private int position = 0;

		public onClickListener(int pos) {
			this.position = pos;
		}

		@Override
		public void onClick(View view) {
			System.out.println("Search->onItemClick->Show me the userID: "
					+ resultData.getItem(position).getPublisherInfo()
							.getUserID());
			utilSrvc.setKeyword(keyword);
			utilSrvc.gotoPublisherInfoPage(context,
					resultData.getItem(position));
		}
	}

	private Bitmap setProfileImg(SearchResulatItem item) {
		Bitmap imageBitmap;
		if (item.getPublisherInfo().getProfile() != null) {
			imageBitmap = BitmapFactory.decodeByteArray(item.getPublisherInfo()
					.getProfile(), 0,
					item.getPublisherInfo().getProfile().length);

		} else {
			imageBitmap = BitmapFactory.decodeResource(context.getResources(),
					R.drawable.dafaultuser01);

		}
		imageBitmap = Bitmap.createScaledBitmap(imageBitmap, 80, 80, true);
		return imageBitmap;
	}

	private boolean isOfferFavorite(SearchResulatItem item) {
		boolean isFavorite = database.isOfferFavorite(item.getOfferID());
		item.setFavorite(isFavorite);
		return isFavorite;
	}

	private class searchResualtList extends BaseAdapter {

		@Override
		public int getCount() {
			return resultData.getSize();
		}

		@Override
		public Object getItem(int position) {
			return resultData.getItem(position);
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			SearchResulatItem itemList = (SearchResulatItem) this
					.getItem(position);
			if (convertView == null) {
				LayoutInflater layoutInflater = (LayoutInflater) context
						.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				convertView = layoutInflater.inflate(
						R.layout.activity_search_item, null);
			}
			ImageView profile = (ImageView) convertView
					.findViewById(R.id.resualt_profile);
			TextView postName = (TextView) convertView
					.findViewById(R.id.resualt_post);
			TextView date = (TextView) convertView
					.findViewById(R.id.resualt_date);
			TextView enterpriseName = (TextView) convertView
					.findViewById(R.id.resualt_enterpriser);
			TextView salary = (TextView) convertView
					.findViewById(R.id.resualt_salary);
			TextView cityName = (TextView) convertView
					.findViewById(R.id.resualt_city);
			TextView domain = (TextView) convertView
					.findViewById(R.id.resualt_domain);
			CheckBox favoriteBox = (CheckBox) convertView
					.findViewById(R.id.resualt_favorite);
			profile.setImageBitmap(setProfileImg(itemList));
			postName.setText(itemList.getTitle());
			date.setText(itemList.getDate());
			enterpriseName.setText(itemList.getEntreprise());
			salary.setText(itemList.getSalary());
			cityName.setText(itemList.getCity());
			domain.setText(itemList.getDomain());
			favoriteBox.setChecked(isOfferFavorite(itemList));
			convertView.setOnClickListener(new onClickListener(position));
			return convertView;
		}
	}

	private class scrollListener implements OnScrollListener {

		@Override
		public void onScroll(AbsListView view, int firstVisibleItem,
				int visibleItemCount, int totalItemCount) {
			lastItem = firstVisibleItem + visibleItemCount - 1;
			// Log.v("Debug", "Search->onSroll->Show me the lastItem: "
			// + firstVisibleItem + " " + visibleItemCount + " "
			// + totalItemCount);
		}

		@Override
		public void onScrollStateChanged(AbsListView view, int scrollState) {
			System.out
					.println("Search->onScrollStateChanged->Show me the lastItem: "
							+ lastItem
							+ " "
							+ offerPerPage
							+ " "
							+ utilSrvc.isEnd());
			resultList.removeFooterView(searchView);
			if (lastItem + 1 == offerPerPage && !utilSrvc.isEnd()) {
				resultList.addFooterView(searchView);
				startSearch();
			}
		}

	}

}
