package com.offerme.client.service;

import java.util.ArrayList;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.util.Base64;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Toast;

import com.offerme.R;
import com.offerme.client.localdata.LocalDataBase;
import com.offerme.client.localdata.LocalPersonInfo;
import com.offerme.client.service.login.LoginRequest;
import com.offerme.client.service.login.LoginResponse;
import com.offerme.client.service.publishoffer.OfferInfo;
import com.offerme.client.service.socket.SocketCommunication;
import com.offerme.client.socket.Request;
import com.offerme.client.socket.RequestType;

public class LoginSrvc implements SocketSrvc {

	private static LoginSrvc loginSrvc = new LoginSrvc();
	private UtilSrvc utilSrvc = UtilSrvc.getInstance();
	private Context context;
	private SocketCommunication socket;
	private Dialog processDialog;
	private LocalPersonInfo personInfo;
	private LocalDataBase offerInfo;

	private LoginRequest req;
	private LoginResponse res;

	private LoginSrvc() {

	}

	public static LoginSrvc getInstance() {
		return loginSrvc;
	}

	public boolean isLoggedInOnce(Context ctx) {
		personInfo = LocalPersonInfo.getInstance(ctx);
		offerInfo = LocalDataBase.getInstance(ctx);
		if (personInfo.getValue(LocalPersonInfo.USERID) != null) {
			return true;
		}
		return false;
	}

	private void setDialog() {
		LayoutInflater factory = LayoutInflater.from(context);
		View dialogView = factory.inflate(R.layout.dialog_process, null);
		AlertDialog.Builder builder = new AlertDialog.Builder(context);
		processDialog = builder.create();
		((AlertDialog) processDialog).setView(dialogView, 0, 0, 0, 0);
	}

	public void submit(Context ctx, LoginRequest loginRequest) {
		context = ctx;
		setDialog();
		socket = new SocketCommunication(this);
		req = loginRequest;
		res = new LoginResponse();
		socket.execute();
	}

	private void saveLoginInfo() {
		personInfo.clearMemory();
		offerInfo.deleteDataBase(LocalDataBase.OFFERTABLENAME);
		offerInfo.deleteDataBase(LocalDataBase.USERTABLENAME);
		personInfo.setUserID(String.valueOf(res.getUserId()));
		personInfo.setName(res.getName());
		personInfo.setCity(res.getCity());
		personInfo.setEnterprise(res.getEnterprise());
		personInfo.setEmail(res.getEmail());
		personInfo.setPhoneNumber(res.getPhoneNumber());
		personInfo.setPhonePublished(res.isPhonePublic());
		personInfo.setEmailPublished(res.isMailPublic());
		if (res.getProfile() != null) {
			personInfo.setProfile(Base64.encodeToString(res.getProfile(),
					Base64.DEFAULT));
		}
		insertOfferList(res.getFavoriteOffer());
		insertOfferList(res.getPublishOffer());
	}

	private void insertOfferList(ArrayList<OfferInfo> offerList) {
		for (int count = 0; count < offerList.size(); count++) {
			offerInfo.insertOffer(offerList.get(count));
		}
	}

	@SuppressWarnings("deprecation")
	@Override
	public void onPreExecute() {
		processDialog.show();
		Window window = processDialog.getWindow();
		window.setGravity(Gravity.CENTER);
		WindowManager.LayoutParams lp = window.getAttributes();
		lp.alpha = 0.5f;
		lp.width=200;
		lp.height=300;
		window.setAttributes(lp);
		window.setFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND,
				WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
	}

	@Override
	public Boolean doInBackground(String... params) {
		Request request = Request.getInstance();
		String[] strReply = new String[] { "" };
		res = request.getObjectFromJson(
				request.sendRequestGetReply(RequestType.LOGIN, strReply, req),
				LoginResponse.class);
		if (res != null && res.getResponseCode() == 0) {
			return true;
		}
		return false;
	}

	@Override
	public void onProgressUpdate(Integer... values) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onPostExecute(Boolean success) {
		processDialog.dismiss();
		Toast toast = null;
		if (success) {
			toast = Toast.makeText(context, "登录成功", Toast.LENGTH_SHORT);
			toast.setGravity(Gravity.CENTER, 0, 0);
			toast.show();
			saveLoginInfo();
			utilSrvc.gotoLoggedInPage(context);
		} else {
			if (res == null) {
				toast = Toast.makeText(context, "系统错误", Toast.LENGTH_SHORT);
			} else if (res.getResponseCode() == -2) {
				toast = Toast.makeText(context, "用户名密码错误", Toast.LENGTH_SHORT);
			}
			toast.setGravity(Gravity.CENTER, 0, 0);
			toast.show();
		}

	}

	@Override
	public void onCancelled() {
		socket.cancel(true);
	}

}
