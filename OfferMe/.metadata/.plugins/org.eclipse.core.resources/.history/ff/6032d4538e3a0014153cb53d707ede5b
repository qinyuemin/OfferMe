package com.offerme.client.activity;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import com.offerme.R;
import com.offerme.client.localdata.LocalDataBase;
import com.offerme.client.localdata.LocalPersonInfo;
import com.offerme.client.service.SendMessageSrvc;
import com.offerme.client.service.UtilSrvc;
import com.offerme.client.service.chat.ChatFriend;
import com.offerme.client.service.chat.ChatMessage;
import com.offerme.client.service.search.SearchResulatItem;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Base64;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

public class ChatActivity extends ActionBarActivity {

	public static String CHATFRIEND = "ChatFriend";
	private ChatFriend friend;
	private LocalPersonInfo personInfo = LocalPersonInfo.getInstance(this);
	private LocalDataBase localDataBase = LocalDataBase.getInstance(this);
	private SendMessageSrvc sendMessageSrvc = SendMessageSrvc.getInstance();
	private UtilSrvc utilSrvc = UtilSrvc.getInstance();
	// private static boolean isActive = false;
	private int HISTROYMESSAGE = 20;
	private Handler handler;
	private TextView friendName;
	private ImageView imageLeft;
	private ImageView imageRight;
	private EditText content;
	private boolean hasHistoryMessage = false;
	private boolean firstMessage = true;
	private ChatMsgViewAdapter mAdapter;
	private ListView mListView;
	private List<ChatMessage> chatMessageList = new ArrayList<ChatMessage>();

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		System.out.println("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_chat);
		getSupportActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
		getSupportActionBar().setCustomView(R.layout.activity_chat_actionbar);
		getSupportActionBar().setBackgroundDrawable(
				new ColorDrawable(Color.parseColor("#1e90d2")));
		Intent intent = this.getIntent();
		friend = (ChatFriend) intent.getSerializableExtra(CHATFRIEND);
		initView();
		initData();
		this.handler = new MyHandler(this, friend);
	}

	@Override
	protected void onResume() {
		super.onResume();
		// isActive = true;
		new RefreshChatMessage(this.handler).start();
	}

	@Override
	protected void onPause() {
		super.onPause();
		// isActive = false;
	}

	@Override
	protected void onDestroy() {
		this.handler.removeCallbacksAndMessages(null);
		super.onDestroy();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// getMenuInflater().inflate(R.menu.chat, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onBackPressed() {
		backClick();
		return;
	}

	@Override
	protected void onNewIntent(Intent intent) {
		System.out.println("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
		super.onNewIntent(intent);
		this.setIntent(intent);
		friend = (ChatFriend) this.getIntent().getSerializableExtra(CHATFRIEND);
		initData();
	}

	// public static boolean isChatActivityActive() {
	// return isActive;
	// }

	public void backToFriendList(View view) {
		backClick();
	}

	public void backClick() {
		Intent intent = this.getIntent();
		if (intent.getBooleanExtra("IsFromPublisherOffer", false)) {
			SearchResulatItem item = (SearchResulatItem) intent
					.getSerializableExtra("PublisherFromChat");
			utilSrvc.gotoPublisherInfoPage(this, item);
		} else {
			utilSrvc.gotoLoggedInFromChat(this, friend.getFriendId());
		}
	}

	private void initView() {
		mListView = (ListView) findViewById(R.id.chat_message_list);
		friendName = (TextView) findViewById(R.id.chat_bar_title);
		content = (EditText) findViewById(R.id.chat_sendmessage);
	}

	private void initData() {
		if (friend != null) {
			friendName.setText(friend.getName());
			chatMessageList.removeAll(chatMessageList);
			List<ChatMessage> historyMessages = localDataBase
					.findHistoryMessageByFriend(friend.getFriendId(),
							HISTROYMESSAGE, null);
			if (historyMessages.size() != 0) {
				hasHistoryMessage = true;
			}
			chatMessageList.addAll(historyMessages);
		}

		if (mAdapter == null) {
			mAdapter = new ChatMsgViewAdapter(this, chatMessageList);
			mListView.setAdapter(mAdapter);
		}

		mAdapter.notifyDataSetChanged();
		mListView.setSelection(mListView.getCount() - 1);
	}

	public void updateChatList(List<ChatMessage> chatMessages) {
		if (chatMessages != null && !chatMessages.isEmpty()) {
			if (hasHistoryMessage) {
				// chatMessageList.clear();
				hasHistoryMessage = false;
			}
			chatMessageList.addAll(chatMessages);
			mAdapter.notifyDataSetChanged();
			mListView.setSelection(mListView.getCount() - 1);
		}
	}

	public void sendMessage(View view) {
		String contString = content.getText().toString();
		if (contString.length() > 0 && friend != null) {
			ChatMessage chatMessage = new ChatMessage();
			chatMessage.setDate(getDate());
			chatMessage.setLocalUserId(Integer.parseInt(personInfo
					.getValue(LocalPersonInfo.USERID)));
			chatMessage.setUserId(friend.getFriendId());
			chatMessage.setName("");
			chatMessage.setComMsg(false);
			chatMessage.setText(contString);
			if (firstMessage) {
				if (localDataBase.findFriendById(friend.getFriendId())
						.getPortraitVersion() != null) {
					chatMessage.setProfileVersion(localDataBase.findFriendById(
							friend.getFriendId()).getPortraitVersion());
				} else {
					chatMessage.setProfileVersion(-1);
				}
				firstMessage = false;
			}
			System.out.println("The portrait version in message sent is: "
					+ chatMessage.getProfileVersion());
			chatMessageList.add(chatMessage);
			mAdapter.notifyDataSetChanged();
			content.setText("");
			mListView.setSelection(mListView.getCount() - 1);
			if (utilSrvc.isNetworkConnected(this) && contString.length() != 0) {
				sendMessageSrvc.sendMessage(this, chatMessage);
			} else {
				utilSrvc.showConnectDialog(this);
			}
		}
	}

	public void gotoFriendInfoPage(View view) {

	}

	private String getDate() {
		Calendar c = Calendar.getInstance();
		String year = String.valueOf(c.get(Calendar.YEAR));
		String month = String.valueOf(c.get(Calendar.MONTH));
		String day = String.valueOf(c.get(Calendar.DAY_OF_MONTH) + 1);
		String hour = String.valueOf(c.get(Calendar.HOUR_OF_DAY));
		String mins = String.valueOf(c.get(Calendar.MINUTE));
		StringBuffer sbBuffer = new StringBuffer();
		sbBuffer.append(year + "-" + month + "-" + day + " " + hour + ":"
				+ mins);
		return sbBuffer.toString();
	}

	private class ChatMsgViewAdapter extends BaseAdapter {

		int IMVT_COM_MSG = 0;
		int IMVT_TO_MSG = 1;

		private List<ChatMessage> data;
		private LayoutInflater mInflater;

		public TextView tvSendTime;
		public TextView tvContent;

		public ChatMsgViewAdapter(Context context, List<ChatMessage> data) {
			this.data = data;
			mInflater = LayoutInflater.from(context);
		}

		// 获取ListView的项个数
		public int getCount() {
			return data.size();
		}

		// 获取项
		public Object getItem(int position) {
			return data.get(position);
		}

		// 获取项的ID
		public long getItemId(int position) {
			return position;
		}

		// 获取项的类型
		public int getItemViewType(int position) {
			ChatMessage entity = data.get(position);
			if (entity.isComMsg()) {
				return IMVT_COM_MSG;
			} else {
				return IMVT_TO_MSG;
			}
		}

		// 获取项的类型数
		public int getViewTypeCount() {
			return 2;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {

			ChatMessage entity = data.get(position);
			Bitmap imageBitmap;
			boolean isComMsg = entity.isComMsg();
			if (isComMsg) {
				convertView = mInflater.inflate(R.layout.activity_chat_left,
						null);
				imageLeft = (ImageView) convertView
						.findViewById(R.id.iv_userheadleft);
				if (friend.getPortrait() != null) {
					imageBitmap = BitmapFactory.decodeByteArray(
							friend.getPortrait(), 0,
							friend.getPortrait().length);
					imageBitmap = Bitmap.createScaledBitmap(imageBitmap, 50,
							50, true);
					imageLeft.setImageBitmap(imageBitmap);
				}

			} else {
				convertView = mInflater.inflate(R.layout.activity_chat_right,
						null);
				imageRight = (ImageView) convertView
						.findViewById(R.id.iv_userheadright);
				if (personInfo.getValue(LocalPersonInfo.PROFILE) != null) {
					byte[] image = Base64.decode(
							personInfo.getValue(LocalPersonInfo.PROFILE),
							Base64.DEFAULT);
					imageBitmap = BitmapFactory.decodeByteArray(image, 0,
							image.length);
					imageBitmap = Bitmap.createScaledBitmap(imageBitmap, 50,
							50, true);
					imageRight.setImageBitmap(imageBitmap);
				}

			}

			tvSendTime = (TextView) convertView.findViewById(R.id.tv_sendtime);
			tvContent = (TextView) convertView
					.findViewById(R.id.tv_chatcontent);

			tvSendTime.setText(entity.getDate());
			tvContent.setText(entity.getText());

			return convertView;
		}

	}

	@SuppressLint("HandlerLeak")
	private class MyHandler extends Handler {
		private WeakReference<ChatActivity> mOuter;
		private ChatFriend friendHandler;

		public MyHandler(ChatActivity activity, ChatFriend friend) {
			mOuter = new WeakReference<ChatActivity>(activity);
			friendHandler = friend;
		}

		@Override
		public void handleMessage(Message msg) {
			ChatActivity outer = mOuter.get();
			if (outer != null) {
				switch (msg.what) {
				case 1:
					if (friendHandler != null) {
						List<ChatMessage> chatMessages = LocalDataBase
								.getInstance(outer).findChatMessageBySender(
										friendHandler.getFriendId(), true);
						outer.updateChatList(chatMessages);
					}
					break;
				}
				super.handleMessage(msg);
			}
		}
	}

	private class RefreshChatMessage extends Thread {
		private Handler handler;

		public RefreshChatMessage(Handler handler) {
			this.handler = handler;
		}

		@Override
		public void run() {

			// while (isActive) {
			while (true) {
				try {
					sleep(2 * 1000);
					Message message = new Message();
					message.what = 1;// Magic number is not good!
					handler.sendMessage(message);
				} catch (InterruptedException e) {

				}
			}
		}
	}

}
