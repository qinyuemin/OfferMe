package com.offerme.client.service.inscription;

import java.io.ByteArrayOutputStream;
import java.io.File;

import com.offerme.client.activity.bean.InscriptionInfo;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Environment;
import android.provider.MediaStore;
import android.provider.MediaStore.Images;
import android.support.v7.app.ActionBarActivity;
import android.util.*;

public class Inscription {
	private final int TAKE_PICTURE = 2;
	private final int GET_GALLERY = 1;

	public Inscription() {
	}

	public boolean checkInscripInfo() {
		return true;
	}

	public boolean submit(Context ctx,InscriptionInfo inscriptionInfo) {
		if (!inscriptionInfo.isAllSet()) {
			//return false;
		}
		if (!inscriptionInfo.checkEmailAddress(inscriptionInfo.getEmail())) {
			//return false;
		}
		ProgressDialog processDialog=new ProgressDialog(ctx);
		processDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
		processDialog.setTitle("OfferMe");
		processDialog.setMessage("«Î…‘∫Û :-)");
		processDialog.setIcon(android.R.drawable.ic_dialog_alert);
		processDialog.setButton("»°œ˚",ctx);
		processDialog.setIndeterminate(false);
		processDialog.setCancelable(true);
		processDialog.show();

		// TODO: Socket service send data to server the return value should be
		// the return resultat. If the resultat is possitive dialog.dismiss()
		return true;
	}

	public boolean uploadPhoto(ActionBarActivity activity, String source) {
		switch (source) {
		case "FromLib":
			Intent intentLib = new Intent(
					Intent.ACTION_PICK,
					android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
			activity.startActivityForResult(intentLib, GET_GALLERY);
			break;
		case "FromCamera":
			Intent intentCamera = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
			if (intentCamera.resolveActivity(activity.getPackageManager()) != null) {
				activity.startActivityForResult(intentCamera, TAKE_PICTURE);
			}
			break;
		default:
			return false;
		}
		return true;
	}

	public Uri getUriFromBitMap(Bitmap imageBitmap, Context ctx) {
		ByteArrayOutputStream bytes = new ByteArrayOutputStream();
		imageBitmap.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
		String path = Images.Media.insertImage(ctx.getContentResolver(),
				imageBitmap, "Title", null);
		Uri uriPath = Uri.parse(path);

		String[] proj = { MediaStore.Images.Media.DATA };
		Cursor actualimagecursor = ctx.getContentResolver().query(uriPath,
				proj, null, null, null);
		int actual_image_column_index = actualimagecursor
				.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
		actualimagecursor.moveToFirst();

		String img_path = actualimagecursor
				.getString(actual_image_column_index);
		File file = new File(img_path);
		Uri fileUri = Uri.fromFile(file);
		return uriPath;
	}
}
