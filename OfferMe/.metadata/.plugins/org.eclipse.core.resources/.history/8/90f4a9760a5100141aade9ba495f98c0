package com.offerme.client.service;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import com.offerme.R;
import com.offerme.client.activity.ChatFriendListActivity;
import com.offerme.client.activity.LoggedInActivity;
import com.offerme.client.localdata.LocalDataBase;
import com.offerme.client.service.chat.ChatFriend;
import com.offerme.client.service.chat.ChatMessage;
import com.offerme.client.service.chat.ChatMessageList;
import com.offerme.client.service.cv.CVList;

import android.app.ActivityManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Binder;
import android.os.IBinder;
import android.os.Vibrator;

public class PollingSrvc extends Service {

	public static final String ACTION = "com.offerme.client.service.PollingSrvc";
	private IBinder mBinder = new ChatBinder();
	private ChatSrvc chatSrvc = ChatSrvc.getInstance();
	private CVManagerSrvc cvSrvc = CVManagerSrvc.getInstance();
	private ActivityManager aManager;
	private Notification mNotification;
	private Intent intent;
	private PendingIntent pendingIntent;
	private NotificationManager mManager;

	@Override
	public IBinder onBind(Intent intent) {
		return mBinder;
	}

	@Override
	public void onCreate() {
		initNotifiManager();
	}

	@Override
	public void onStart(Intent intent, int startId) {
		new PollingThread(this).start();
	}

	public class ChatBinder extends Binder {
		public PollingSrvc getService() {
			return PollingSrvc.this;
		}
	}

	private void initNotifiManager() {
		int icon = R.drawable.ic_launcher;
		aManager = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
		mManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
		mNotification = new Notification();
		mNotification.icon = icon;
		mNotification.tickerText = "New Message";
		mNotification.defaults |= Notification.DEFAULT_SOUND;
		mNotification.flags = Notification.FLAG_AUTO_CANCEL;
	}

	@SuppressWarnings("deprecation")
	private void showNotification(List<ChatFriend> friends) {
		mNotification.when = System.currentTimeMillis();
		setNewFriend(friends);
		pendingIntent = PendingIntent.getActivity(this, 0, intent,
				Intent.FLAG_ACTIVITY_NEW_TASK);
		mNotification.setLatestEventInfo(this,
				getResources().getString(R.string.app_name),
				"New message from offerme!", pendingIntent);
		mManager.notify(0, mNotification);
	}

	private void setNewFriend(List<ChatFriend> friends) {
		intent = new Intent();
		if (friends != null && !friends.isEmpty()) {
			intent.setClass(this, LoggedInActivity.class);
			intent.putExtra(LoggedInActivity.FROM_CHAT, true);
			intent.putExtra(ChatFriendListActivity.FRIENDLIST,
					(Serializable) friends);
			intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		}
	}

	private boolean haveNewMessages(ChatMessageList chatMsgList) {
		if (chatMsgList == null || chatMsgList.getResponseCode() == -1
				|| chatMsgList.getChatMessageList().isEmpty()) {
			return false;
		}
		return true;
	}

	public void newMessageComming() {
		saveNewChatMessages(chatMsgList.getChatMessageList());
		List<ChatFriend> friends = saveNewFriends(chatMsgList
				.getChatMessageList());
		if (!aManager.getRunningTasks(1).get(0).topActivity.getPackageName()
				.equals(ctx.getPackageName())) {
			showNotification(friends);
		} else if (!aManager.getRunningTasks(1).get(0).topActivity
				.getClassName().contains("LoggedIn")
				&& !aManager.getRunningTasks(1).get(0).topActivity
						.getClassName().contains("ChatActivity")) {
			Vibrator v = (Vibrator) ctx
					.getSystemService(Context.VIBRATOR_SERVICE);
			v.vibrate(500);
		}
	}

	private void saveNewChatMessages(List<ChatMessage> chatMessages) {
		LocalDataBase localData = LocalDataBase.getInstance(this);
		localData.insertChatMessages(chatMessages);
	}

	private List<ChatFriend> saveNewFriends(List<ChatMessage> chatMessages) {

		List<ChatFriend> friends = new ArrayList<ChatFriend>();
		for (ChatMessage chatMessage : chatMessages) {
			ChatFriend friend = new ChatFriend();
			friend.setFriendId(chatMessage.getUserId());
			friend.setName(chatMessage.getName());
			friend.setLastMessageId(chatMessage.getMessageId());
			friend.setPortraitVersion(chatMessage.getProfileVersion());
			if (chatMessage.getProfile() != null) {
				friend.setPortrait(chatMessage.getProfile());
			}
			System.out.println("The portrait version in message received is: "
					+ friend.getPortraitVersion());
			friends.add(friend);
		}

		LocalDataBase localData = LocalDataBase.getInstance(this);
		localData.insertOrUpdateFriends(friends);
		return friends;
	}

	class PollingThread extends Thread {

		private Context ctx;

		public PollingThread(Context ctx) {
			this.ctx = ctx;
		}

		@Override
		public void run() {
			// System.out.println("Polling...");
			ChatMessageList chatMsgList = chatSrvc.getComingMessages(ctx);
			CVList cvList = cvSrvc.getCVList(ctx);
			if (haveNewMessages(chatMsgList) && chatMsgList != null) {
				newMessageComming();
			}
		}
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
	}

}
